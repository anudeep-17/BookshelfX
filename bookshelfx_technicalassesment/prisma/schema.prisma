generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteCategories String[]
  Avatar     String?
  rentals   BookRentalDetails[] @relation("RentedByUser")
  authorizedRentals BookRentalDetails[] @relation("AuthorizedByLibrarian")
  reviews   BookReview[]
  favoriteBooks  FavoriteBook[]
}
model BookDetails{
  id              Int      @id @default(autoincrement())
  ISBN            String
  coverimage      String
  title           String
  authors         String[]
  description     String
  availability    Boolean
  category        String
  publisher       String
  publishedDate   DateTime 
  pagecount       Int
  rating          Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  rentals         BookRentalDetails[]
  reviews         BookReview[]
  favoritedBy     FavoriteBook[]

  @@unique([title, authors])
} 

model BookRentalDetails {
  id              Int      @id @default(autoincrement())
  book            BookDetails @relation(fields: [bookId], references: [id])
  bookId          Int
  user            User     @relation("RentedByUser", fields: [userId], references: [id])
  userId          Int
  rentalDate      DateTime
  returnDate      DateTime
  returned        Boolean
  isOverdue       Boolean
  librarian       User?    @relation("AuthorizedByLibrarian", fields: [librarianId], references: [id])
  librarianId     Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model BookReview {
  book      BookDetails @relation(fields: [bookId], references: [id])
  bookId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  review    String
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([userId, bookId])
  @@unique([userId, bookId])
}

model FavoriteBook {
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  book   BookDetails   @relation(fields: [bookId], references: [id])
  bookId Int
  @@id([userId, bookId])
  @@unique([userId, bookId])
}